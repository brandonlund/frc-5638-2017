// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5638.FRC56382017Robot.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.RobotBase;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotState;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.awt.peer.RobotPeer;
import java.lang.reflect.Array;

import org.usfirst.frc5638.FRC56382017Robot.Robot;
import org.usfirst.frc5638.FRC56382017Robot.RobotMap;

/**
 *
 */
public class visionCom extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public visionCom() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	int IMG_WIDTH = 640;
        int IMG_HEIGHT = 480;
        
        
        
        
        //NetworkTable table;
        //table = NetworkTable.getTable("myContoursReport");
        /*
        double[] defaultValue = new double[0];
        while (true){
        	double[] areas = table.getNumberArray("area", defaultValue);
        	System.out.print("areas: ");
        	for(double area : areas){
        		System.out.print(area + " ");
        	}
        	System.out.println();
        	Timer.delay(1);
        }
    }
        */
        while(RobotState.isEnabled()){
        	NetworkTable table;
        	table = NetworkTable.getTable("GRIP/myContoursReport");
	        double[] defaultValue = new double[0];
	        double[] x = table.getNumberArray("centerX", defaultValue);
	        double[] y = table.getNumberArray("centerY", defaultValue);
	        double[] h = table.getNumberArray("height", defaultValue);
	        double[] w = table.getNumberArray("width", defaultValue);
	        double[] a = table.getNumberArray("area", defaultValue);
        
	        RobotMap.driveTraindriveMotors.setSafetyEnabled(false);
	        
	        
	        
	        
	    try{
	        if(a.length == 2 && x.length == 2){
	        	double centerX = (x[0] + x[1])/2;
	        	double totalArea = a[0] + a[1];
		        if(centerX > 360 && x.length == 2){
			        System.out.println("TURNING RIGTH");
			        Robot.driveTrain.turnRight();
			        Timer.delay(.1);
			    }else if(centerX < 280 && x.length == 2){
			        System.out.println("TURNING LEFT");
			        Robot.driveTrain.turnLeft();
			        Timer.delay(.1);
			    }else if(x.length < 2 || x.length > 2){
			    	System.out.println("no x values or too many x values");
			    	Timer.delay(.1);
			    }else if(totalArea > 1000 && totalArea < 9000){
			        System.out.println("DRIVING FORWARD");
			        Robot.driveTrain.driveForward();
			        Timer.delay(.1);
			    }else if(totalArea > 10000){
			        System.out.println("DRIVING BACKWARD");
			        Robot.driveTrain.driveBackward();
			        Timer.delay(.1);
			    }else if(a.length != 2){
			        System.out.println("area array has more than or less than 2 values");
			        Timer.delay(.5);
			    }else{
			    	System.out.println("robot stopped");
			    	Robot.driveTrain.stop();
			    	Timer.delay(.1);
			    }
			    if(totalArea < 2000 || totalArea > 11000){
			        System.out.println("STOPPED");
			        Robot.driveTrain.stop();
			    }
			}
	    }
        catch(ArrayIndexOutOfBoundsException ex){
        	System.out.println("Goal not found.");
        	Timer.delay(1);
        }finally{
	        end();
	    }
    }
}

    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
